<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[宝塔面板使用阿里云OSS备份数据]]></title>
      <url>/2017/11/23/btoss.html</url>
      <content type="html"><![CDATA[<p>宝塔Linux面板对阿里云OSS提供支持，可以将网站、数据库打包备份到阿里云OSS。阿里云OSS提供5GB免费存储空间。</p>
<a id="more"></a>
<p><strong>注意：创建Bucket空间时，请选择私有的</strong></p>
<ol>
<li><p>首先，申请开通阿里云<a href="https://www.aliyun.com/product/oss" target="_blank" rel="external">OSS</a>。<br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205643oqrz5ocoz2gr0l2l.png" alt=""></p>
</li>
<li><p>开通后去<strong>管理控制台</strong>操作。<br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205633sl46uq6mtwubtsii.png" alt=""></p>
</li>
<li><p>新建<strong>Bucket</strong><br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205641t7m68mumm6p7uuuy.png" alt=""></p>
</li>
<li><p>新建完之后获取外联AccessKey，密匙，外链域名。这里注意阿里云会要求开通一个非全局的Accesskey，按照提示去开通个OSSfullAccess的用户就好了，然后获取AK和密匙。<br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205642fpixupu9glwbi3cu.png" alt=""><br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205642lvuns6i6zd6l663r.png" alt=""><br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205642oin6ca6pkdhgammh.png" alt=""></p>
</li>
<li><p>去<strong>宝塔面板</strong>安装阿里云OSS插件，配置里填好相应的信息。<br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205643evd5biel9om7sogg.png" alt=""><br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205643lgni7iidinns87ih.png" alt=""></p>
</li>
<li><p>最后，去<strong>计划任务</strong>里添加备份网站及数据库的任务，添加好后可以先执行试一下，看看你的阿里云OSS里有没有相应的备份文件就大功告成了。<br><img src="https://www.bt.cn/bbs/data/attachment/forum/201702/26/205643mqqjfuxuk2kqj3kq.png" alt=""></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> OSS </tag>
            
            <tag> 备份 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用免费的Google Cloud部署SS来科学上网]]></title>
      <url>/2017/11/23/ss.html</url>
      <content type="html"><![CDATA[<p>之前一直想搞个搬瓦工或者vultr的VPS来部署SS，来实现科(V)学(P)上(N)网，但始终抢不到优惠的实例。偶然间发现Google Cloud在免费，而且貌似免费期从之前的2个月提高到1年，这样看来不用花一分钱，即可实现爱(翻)国(墙)上网，还可以在享受配置、性能更高、更稳定Google服务器，岂不美哉！</p>
<a id="more"></a>
<h1 id="Google-Cloud免费简介"><a href="#Google-Cloud免费简介" class="headerlink" title="Google Cloud免费简介"></a>Google Cloud免费简介</h1><p>Google Cloud顾名思义即Google提供的云计算服务，和国内的阿里云、腾讯云、百度云类似。提供的服务无非也就那几大类：基础云计算服务、大数据类、物联网、CDN等等。免费以300刀赠金形式，可以体验所有产品当然也包括Compute Engine(即VPS)，需要注意Google的云主机计费方式与国内不同之处在于：国内一般是全包，而Google是云主机、公网IP和流量分开计费，需确保你在一年内的消费不超过300刀，后面会详细讲。<br><img src="http://shupcd.test.upcdn.net/ss/free.png" alt="free"></p>
<h1 id="申请与开通VPS主机"><a href="#申请与开通VPS主机" class="headerlink" title="申请与开通VPS主机"></a>申请与开通VPS主机</h1><p>在一切操作前，你需要先有一个临时的科(V)学(P)上(N)网环境，因为注册和配置Google云服务的工作需要在Google网站上完成。可以在手机里操作，目前有很多相关APP有免费使用时长，半个小时足以。</p>
<p>另外，你需要准备好：</p>
<ol>
<li>一张Visa或者万事达的信用卡(会扣1美元验证卡真实性，几分钟后就会退还。)</li>
<li>一个美国电话号码(可以用<strong>iPlum</strong>。非必须，仅仅为提高通过率，目前号码不需要验证，所以非真实号码应该可以。)</li>
<li>一个美国地址(自己去搜索，地址需要真实)</li>
</ol>
<p>准备就绪：</p>
<ol>
<li>登陆Google Cloud主页：<code>cloud.google.com</code>，点击<strong>TRY IT FREE</strong>，登陆你的Google账号。</li>
<li>地区选择美国，然后同意服务条款后，账户类型选择<strong>个人</strong>，填上地址、信用卡信息，即可开通账户。<br><img src="http://shupcd.test.upcdn.net/ss/first.png" alt="first"></li>
<li>开通后创建VM实例，按照下面2张图配置即可，笔者选的是1核1G内存10G硬盘CENTOS6系统，asia-east1-c节点(台湾)。也可根据自己需求选择配置。另外在网络那里选择添加外部静态IP(即公网IP地址)。最后点创建即可开通云主机。</li>
</ol>
<p><strong>配置云主机</strong><br><img src="http://shupcd.test.upcdn.net/ss/kaitong1.png" alt="conf"></p>
<p><strong>配置公网IP</strong><br><img src="http://shupcd.test.upcdn.net/ss/kaitong2.png" alt="ip"></p>
<p>这里说一下配置的选择及价格：主机的价格表不在此列举，自己选择适合的。公网IP基本上是免费，那就来梳理一下流量的计费方式：</p>
<table>
<thead>
<tr>
<th>流量类型</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>入口</td>
<td>免费</td>
</tr>
<tr>
<td>出口*到同一区域</td>
<td>免费</td>
</tr>
<tr>
<td>出口在同一区域内不同的谷歌云平台服务</td>
<td>免费</td>
</tr>
<tr>
<td>出口到谷歌产品（如YouTube，Google地图，驱动器）</td>
<td>不收费**</td>
</tr>
<tr>
<td>在同一地区区域之间的出口（每GB）</td>
<td>$ 0.01</td>
</tr>
<tr>
<td>在美国国内地区之间的出口（每GB）</td>
<td>$ 0.01</td>
</tr>
<tr>
<td>洲际出口</td>
<td>参考下面表格</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>每月使用</th>
<th>网络(出)全球(不包括中国和澳大利亚，但包括香港)(每GB)</th>
<th>网络(出)中国(不包括香港)(每GB)</th>
<th>网络(出)澳大利亚(每GB)</th>
<th>网络(入)</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-1 TB</td>
<td>$ 0.12</td>
<td>$ 0.23</td>
<td>$ 0.19</td>
<td>免费</td>
</tr>
<tr>
<td>1-10 TB</td>
<td>$ 0.11</td>
<td>$ 0.22</td>
<td>$ 0.18</td>
<td>免费</td>
</tr>
<tr>
<td>10+ TB</td>
<td>$为0.08</td>
<td>$ 0.20</td>
<td>$ 0.15</td>
<td>免费</td>
</tr>
</tbody>
</table>
<p>可以看出如果每月流量不超过<strong>1TB</strong>，就是$0.23月/GB。以最低配主机(如果仅仅用于科学上网，最低配没问题)为例，$5/月，一年是$60，还剩下$240用于流量的开销，240 / 0.23 = 1043GB， 1043 / 12个月 = 86GB 也就是每个月用 86GB流量，足够了。当然也可以选择更高配置的主机，这样流量少一点，自己权衡。</p>
<h1 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h1><p>开通主机后，因为后面要配置SS，默认的防火墙限制太多，需要修改防火墙规则。<br>在<code>控制台/VPC网络/防火墙规则</code>里，名称随便写，其他按下图配置即可。IP地址范围： <code>0.0.0.0/0</code><br><img src="http://shupcd.test.upcdn.net/ss/firewall.png" alt="firewall"></p>
<h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><ol>
<li><p>用  PuTTYgen生成密钥<br>使用SSH工具<code>Xshell</code>或者<code>Putty</code>，这里以Putty为例，使用方法参考<a href="http://47.96.27.26/2017/11/16/hexo.html#SSH%E5%B7%A5%E5%85%B7">之前文章</a>，Putty安装好后程序包里有一个PuttyGen工具，打开后，直接点击<code>Generate</code>来生成一对密钥用于登陆SSH。<br><strong>注意</strong>： 生成好后在<code>key comment</code>处，原本生成的应该是rsa-key-20171123，需要修改成rsa-key-20170905<code>XXXX</code>，<code>XXXX</code>是你申请Google Cloud 时，“XXXX@gmail.com” 前的字符，说白了就是你邮箱的用户名。<br><strong>完成后将 public key 保存，保存为<code>.pub</code>格式文件，然后保存 private key，保存为<code>.ppk</code>文件格式！</strong></p>
</li>
<li><p>Google Cloud控制台 导入公钥<br>在<code>控制台/compute engine/元数据</code>中，右边点击<code>SSH密钥</code>，点击修改，添加刚刚保存的公钥<code>.pub</code>文件里的内容进去保存即可。</p>
</li>
<li><p>Putty里导入私钥 连接实例<br>打开Putty ，在<code>Connection/SSH/Auth</code>, 导入刚刚保存的私钥<code>.ppk</code>文件。如下图。接下来回到<code>session</code>，在Host Name (or IP address)中填入步骤1修改过的 <code>Key comment ＋@实例 ip</code>(比如rsa-key-20170905name@8.8.8.8)，即可登录SSH。连接成功后，输入<code>sudo -i</code>即可获得root权限。<br><img src="http://shupcd.test.upcdn.net/ss/putty.png" alt="putty"></p>
</li>
</ol>
<p><img src="http://shupcd.test.upcdn.net/ss/ssh.png" alt="ssh"></p>
<h1 id="SS的安装与配置"><a href="#SS的安装与配置" class="headerlink" title="SS的安装与配置"></a>SS的安装与配置</h1><p>先来说说SS特点 ：</p>
<ul>
<li>省电（在电量查看里几乎看不到它的身影）</li>
<li>支持开机自启动，且断网无影响，无需手动重连</li>
<li>可使用自己的服务器（安全和速度的保证）</li>
<li>支持区分国内外流量（PAC模式）</li>
<li>可对应用设置单独代理</li>
</ul>
<p>安装和配置主要是参考秋水逸冰文章：</p>
<ol>
<li><p>在VPS上安装SS前，需要先安装最新内核并开启 BBR，可以使用秋水逸冰的一键安装脚本，具体<a href="https://teddysun.com/489.html" target="_blank" rel="external">看这里</a>。<br>BBR 即拥塞控制算法，目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 效果并不比速锐差。据很多人反馈，速度比锐速还厉害！！</p>
</li>
<li><p>SS的安装和配置具体也可见秋水逸冰<a href="https://teddysun.com/486.html/comment-page-6" target="_blank" rel="external">一键安装脚本</a>。一般选择Python版。安装完成后，脚本提示如下：</p>
</li>
</ol>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip           #SS服务器的IP</span><br><span class="line">Your Server Port      :your_server_port         #SS服务器的端口</span><br><span class="line">Your Password         :your_password            #SS服务器登陆密码</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method   #SS服务器加密方式</span><br><span class="line"></span><br><span class="line">Your QR Code: (<span class="keyword">For</span> Shadowsocks Windows, OSX, Android <span class="keyword">and</span> iOS clients)</span><br><span class="line"> ss:<span class="comment">//your_encryption_method:your_password@your_server_ip:your_server_port</span></span><br><span class="line">Your QR Code <span class="keyword">has</span> been saved <span class="keyword">as</span> a PNG file path:</span><br><span class="line"> your_path.png</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//teddysun.com/486.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure>
<ol>
<li>最后在Win、Mac、IOS、android中下载对应的SS客户端，填入以上配置好的IP、端口、密码，选择相应的加密方式(Win下，右键任务栏纸飞机小图标，启用系统代理)，即可去探索外面的世界了。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> SS </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Valine插件为Hexo博客添加评论功能]]></title>
      <url>/2017/11/21/valine.html</url>
      <content type="html"><![CDATA[<p>Hexo由于其静态特性，具有一定的局限性，因此需要借助于第三方服务来扩展站点的功能。作为一个博客系统，Hexo几乎完美，唯独(默认模式下)差了一个最重要的互动功能——访客评论。NexT主题内置了多款第三方评论系统：多说、畅言、有言、disqus、gitment等等，试用过后都觉得差强人意。不经意间发现了Valine，部署简单，界面风格简洁，调用迅速(无后端)，还支持Markdown，这简直就是Hexo的绝配。</p>
<a id="more"></a>
<p>至于放弃其他几个系统，主要原因有以下：</p>
<ul>
<li>多说 - 这个不必多说，已经关闭；</li>
<li>畅言 - 搜狐旗下，应该不错，不过域名需要备案才可以使用，是一个不小的门槛；</li>
<li>有言 - jiaThis旗下，使用过程中遇到多次无法在页面中正常加载的情况，不稳定；</li>
<li>disqus和gitment - 一句话，远在大洋彼岸不适合国内使用。</li>
</ul>
<h1 id="Valine简介"><a href="#Valine简介" class="headerlink" title="Valine简介"></a>Valine简介</h1><p> <strong>Valine</strong>(<a href="https://valine.js.org" target="_blank" rel="external">官网</a>)是一款基于<a href="http://leancloud.cn/" target="_blank" rel="external">Leancloud</a>的快速、简洁且高效的无后端评论系统。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>快速</li>
<li>安全</li>
<li>无后端实现</li>
<li>MarkDown 全语法支持</li>
<li>轻量易用(~15kb gzipped)</li>
</ul>
<h1 id="Valine配置及使用"><a href="#Valine配置及使用" class="headerlink" title="Valine配置及使用"></a>Valine配置及使用</h1><h2 id="获取appid和appkey"><a href="#获取appid和appkey" class="headerlink" title="获取appid和appkey"></a>获取appid和appkey</h2><p>请先<a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="external">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="external">注册</a> <code>LeanCloud</code>, 进入<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="external">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp" target="_blank" rel="external">创建应用</a>，选择免费的开发版即可。注意右上角有几个节点，可以就近选择。</p>
<p><img src="http://shupcd.test.upcdn.net/valine/create.jpg" alt="create"></p>
<p>应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>appid</code>和<code>appkey</code>了：</p>
<p><img src="http://shupcd.test.upcdn.net/valine/IDnKey.jpg" alt="IDnKey"></p>
<p>为了数据安全，请注意设置自己的<code>安全域名</code>：</p>
<p><img src="http://shupcd.test.upcdn.net/valine/securedn.jpg" alt="secureDN"></p>
<h2 id="Hexo-NexT中的开启和设置"><a href="#Hexo-NexT中的开启和设置" class="headerlink" title="Hexo-NexT中的开启和设置"></a>Hexo-NexT中的开启和设置</h2><p>Hexo-NexT中已经默认安装了Valine插件，如果没有可以使用以下命令安装：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> valine <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>完成后，在NexT主题配置文件中加入/修改代码以开启：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></span><br><span class="line"><span class="attr">  appid:</span>                            <span class="comment"># 填上之前获取的AppID</span></span><br><span class="line"><span class="attr">  appkey:</span>                           <span class="comment"># 填上之前获取的AppKey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># 新留言是否需要通知 https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># 是否需要验证，验证比较反人类建议false关闭</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">请在此输入您的留言</span> <span class="comment"># 默认留言框内的文字</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># 默认头像</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># 默认留言框的头部需要访问者输入的信息</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size #默认单页的留言条数</span></span><br></pre></td></tr></table></figure>
<p>OK，至此已经已经完成配置并成功开启，<code>Hexo g -d</code>赶紧去看效果吧。</p>
<p>后期如果需要管理留言，至<code>leancloud/控制台/储存/comment</code>即可进行添加、删除等操作。</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Valine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用又拍云CDN加速Hexo博客]]></title>
      <url>/2017/11/21/cdn.html</url>
      <content type="html"><![CDATA[<p>辛辛苦苦搭建好博客，虽然Hexo本身是全静态网页，页面加载速度相对于动态博客程序已经是非常可观，但NexT主题调用了不少js文件，如果再加上其他的图片、音视频插件等等还是会在一定程度上造成延迟。本着折腾不止和完美主义的精神，用CDN来加速Hexo！</p>
<a id="more"></a>
<h1 id="CDN加速的原理"><a href="#CDN加速的原理" class="headerlink" title="CDN加速的原理"></a>CDN加速的原理</h1><p>这里简明扼要地解释一下CDN加速的原理：你上传到CDN加速网站(如<strong>又拍</strong>或者<strong>七牛</strong>)空间里的文件(或者网站)以镜像的形式存放到多台服务器，这些服务器分布在祖国甚至全世界各地，访问者就近读取较快的镜像，以实现快速加载的效果。举个栗子：你的文件(或网站)在上海，没有CDN，一个北京的访问者需要直接连接你在上海的服务器，有了CDN，这个北京的访问者只需要访问你的文件(网站)在北京的镜像即可。尤其是国内外的互访，CDN可使访问速度大大提升。</p>
<h1 id="哪些因素会影响加载速度？"><a href="#哪些因素会影响加载速度？" class="headerlink" title="哪些因素会影响加载速度？"></a>哪些因素会影响加载速度？</h1><h2 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h2><p>js文件就是JavaScript脚本文件，用来实现各种酷炫的动态效果。一般是加载在html页面的<code>&lt;head&gt;</code>部分，所以页面加载速度首先要考虑这一块。Hexo的js文件大致包含以下3类：</p>
<ol>
<li>公共js<br>公共js是通用型，比如实现图片放大效果的<strong>Fancybox</strong>，或者实现图片慢加载的<strong>LazyLoad</strong>等等。这些js已经开发好，直接在html里引用(存放在镜像网站上，如<a href="http://www.bootcdn.cn/" target="_blank" rel="external">BootCDN</a>)js文件链接即可实现效果。</li>
<li>定制页面效果js<br>即NexT主题中定制的某些特效，例如实现页面响应式效果的<strong>Bootstrap</strong>，或者增强移动端滚动及动画效果的<strong>Motion</strong>等等。这些js理论上也是公共js，只不过NexT主题作者修改了代码，以适用于NexT主题。这些js文件存放在本地Hexo目录<code>hexo\themes\next\source\js\src</code>下。</li>
<li>第三方插件js<br>这个不用多说了吧，Hexo默认安装了不少实用的第三方插件，比如，可直接在网页中显示数学公式的<strong>MathJax</strong>，优化SEO的<strong>Baidu-push</strong>等等。这些插件可在<strong>主题</strong>配置文件<code>_config.yml</code>中进行配置。相关js文件有些存放在<code>hexo\themes\next\layout\_third-party</code>中，有些则通过外部引用形式加载。<h2 id="图片-音、视频"><a href="#图片-音、视频" class="headerlink" title="图片(音、视频)"></a>图片(音、视频)</h2>如果博客文章很多，绝大部分的带宽都会消耗在这部分静态数据上。这个不多说了。<h2 id="Google字体引用"><a href="#Google字体引用" class="headerlink" title="Google字体引用"></a>Google字体引用</h2>很多文章中提到，由于被墙的缘故，引用Google字体会严重拖累网站，于是乎屏蔽Google字体的插件层出不穷。不过笔者测试发现，无论是Google字体<a href="http://www.googlefonts.cn" target="_blank" rel="external">中文官网</a>，还是Google字体的引用服务器<code>fonts.googleapis.com</code>都没有被墙，而其速度在全球范围内都相当理想(如下图)，所以完全没有必要修改Google字体的引用源，比如改成360CDN什么的。</li>
</ol>
<p><img src="http://shupcd.test.upcdn.net/cdn/google-font-test.png" alt="cdn"></p>
<p>综上，下面就开始着手对Hexo博客的<strong>js文件</strong>和<strong>图片(音、视频)</strong>文件进行CDN加速。</p>
<h1 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h1><h2 id="公共js加速"><a href="#公共js加速" class="headerlink" title="公共js加速"></a>公共js加速</h2><p>在版本 5.0.1 之后的NexT主题，有一个方便的功能可以通过修改<strong>主题</strong>配置文件<code>_config.yml</code>中常用外部js的引用地址，来实现自定义CDN加速。下面是此部分的配置(在<code>_config.yml</code>搜索<code>CDN</code>即可找到)，笔者已经修改成BootCDN的引用地址。关于国内靠谱的JavaScript CDN库，还是推荐BootCDN，可参考知乎的<a href="https://www.zhihu.com/question/20227463" target="_blank" rel="external">讨论</a>。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Script</span> <span class="selector-tag">Vendors</span>.</span><br><span class="line"># <span class="selector-tag">Set</span> <span class="selector-tag">a</span> <span class="selector-tag">CDN</span> <span class="selector-tag">address</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">vendor</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">customize</span>.</span><br><span class="line"># <span class="selector-tag">For</span> <span class="selector-tag">example</span></span><br><span class="line">#    <span class="selector-tag">jquery</span>: <span class="selector-tag">https</span>:<span class="comment">//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span></span><br><span class="line"># <span class="selector-tag">Be</span> <span class="selector-tag">aware</span> <span class="selector-tag">that</span> <span class="selector-tag">you</span> <span class="selector-tag">should</span> <span class="selector-tag">use</span> <span class="selector-tag">the</span> <span class="selector-tag">same</span> <span class="selector-tag">version</span> <span class="selector-tag">as</span> <span class="selector-tag">internal</span> <span class="selector-tag">ones</span> <span class="selector-tag">to</span> <span class="selector-tag">avoid</span> <span class="selector-tag">potential</span> <span class="selector-tag">problems</span>.</span><br><span class="line"># <span class="selector-tag">Please</span> <span class="selector-tag">use</span> <span class="selector-tag">the</span> <span class="selector-tag">https</span> <span class="selector-tag">protocol</span> <span class="selector-tag">of</span> <span class="selector-tag">CDN</span> <span class="selector-tag">files</span> <span class="keyword">when</span> you enable https on your site.</span><br><span class="line"><span class="attribute">vendors</span>:</span><br><span class="line">  # Internal path prefix. Please do <span class="keyword">not</span> edit it.</span><br><span class="line">  <span class="attribute">_internal</span>: lib</span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">2.1</span>.<span class="number">3</span></span><br><span class="line">  <span class="attribute">jquery</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">2.1</span>.<span class="number">5</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">http</span>:<span class="comment">//fancyapps.com/fancybox/</span></span><br><span class="line">  <span class="attribute">fancybox</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="attribute">fancybox_css</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1.0</span>.<span class="number">6</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">https</span>:<span class="comment">//github.com/ftlabs/fastclick</span></span><br><span class="line">  <span class="attribute">fastclick</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1.9</span>.<span class="number">7</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">https</span>:<span class="comment">//github.com/tuupola/jquery_lazyload</span></span><br><span class="line">  <span class="attribute">lazyload</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">http</span>:<span class="comment">//VelocityJS.org</span></span><br><span class="line">  <span class="attribute">velocity</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/velocity/1.2.1/velocity.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">http</span>:<span class="comment">//VelocityJS.org</span></span><br><span class="line">  <span class="attribute">velocity_ui</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">0.7</span>.<span class="number">9</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">https</span>:<span class="comment">//faisalman.github.io/ua-parser-js/</span></span><br><span class="line">  <span class="attribute">ua_parser</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">4.6</span>.<span class="number">2</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">http</span>:<span class="comment">//fontawesome.io/</span></span><br><span class="line">  <span class="attribute">fontawesome</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css</span></span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1</span></span><br><span class="line">  # <span class="attribute">https</span>:<span class="comment">//www.algolia.com</span></span><br><span class="line">  <span class="attribute">algolia_instant_js</span>: </span><br><span class="line">  <span class="attribute">algolia_instant_css</span>:</span><br><span class="line"></span><br><span class="line">  # Internal <span class="attribute">version</span>: <span class="number">1.0</span>.<span class="number">2</span></span><br><span class="line">  # <span class="attribute">See</span>: <span class="attribute">https</span>:<span class="comment">//github.com/HubSpot/pace</span></span><br><span class="line">  # Or use direct links <span class="attribute">below</span>:</span><br><span class="line">  # <span class="attribute">pace</span>: <span class="comment">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line">  # <span class="attribute">pace_css</span>: <span class="comment">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line">  <span class="attribute">pace</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/pace/1.0.2/pace.js</span></span><br><span class="line">  <span class="attribute">pace_css</span>: <span class="attribute">https</span>:<span class="comment">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br></pre></td></tr></table></figure>
<p>使用Chrome浏览器开发者工具-&gt;Network，按住Shift+刷新(全新加载)即可看到效果。下图显示加速的效果非常好！修改前首页加载需要10秒以上，其中尤其index.js(即JQuery.js)严重拖累了加载速度。修改之后，基本上就是——<strong>秒开！</strong></p>
<p><img src="http://shupcd.test.upcdn.net/cdn/comparison.png" alt="comparison"></p>
<h2 id="页面效果js加速"><a href="#页面效果js加速" class="headerlink" title="页面效果js加速"></a>页面效果js加速</h2><p>这些js文件存放在本地，原则上把它们上传到CDN加速空间中，再修改引用源即可。但基于以下原因考虑，这里不做修改。</p>
<ul>
<li>这些js文件对加载速度影响不大；</li>
<li>如果主题更新又会恢复到原始状态；</li>
<li>修改引用源改动源文件较多、比较麻烦。</li>
</ul>
<h2 id="插件js加速"><a href="#插件js加速" class="headerlink" title="插件js加速"></a>插件js加速</h2><p>同样道理，这些js文件若是存放在Hexo本地的，需要将他们上传到CDN加速空间里；如果是外部引用，需要先将引用地址的原js文件下载下来，存放到CDN加速空间里。最后统一修改原引用地址到CDN加速空间地址。</p>
<p>下面以<strong>又拍云</strong>的CDN为例介绍，注册开通很简单，这里略过。需要注意不管七牛还是又拍，注册时都需要上传手持身份证的照片进行身份核验。身份认证后即可开始操作，具体操作方法请参考官方<a href="https://docs.upyun.com/api/quick_start/" target="_blank" rel="external">文档</a>。简单说两句：创建的服务选择网页图片类型，然后添加操作员、密码即可，后面如有需要还可以绑定域名(需备案)，https等等。</p>
<p>一切就绪后，下面以加速<code>valine.js</code>插件为例说明。<strong>Valine</strong>是一款评论插件，安装及配置请参考<a href="http://47.96.27.26/2017/11/21/valine.html">《使用Valine插件为Hexo博客添加评论功能》</a>。</p>
<p>开启并配置好Valine后，打开<code>hexo\themes\next\layout\_third-party\comments\valine.js</code>可以看到如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'//unpkg.com/valine/dist/Valine.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看出<strong>Valine</strong>的运行是依赖以上2个外部js文件，这里以加速第二个js文件为例，修改第二个js文件的源为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//XXX.test.upcdn.net/Valine.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> # XXX改成你的又拍云服务名</span><br></pre></td></tr></table></figure>
<p>然后，把<strong>原js文件</strong><code>Valine.min.js</code>、即<code>https://unpkg.com/valine/dist/Valine.min.js</code>下载下来，通过FTP工具(推荐<code>FileZilla</code>)上传到你的又拍云空间根目录里。</p>
<p>这样，<code>Valine.min.js</code>这个文件就在用又拍云进行CDN加速了。<code>Hexo g -d</code>查看效果吧。其他插件js的加速理论上适用上述方法，关键是第一步要找到js文件正真的源引用地址。</p>
<h2 id="图片-音、视频-加速"><a href="#图片-音、视频-加速" class="headerlink" title="图片(音、视频)加速"></a>图片(音、视频)加速</h2><p>其实如果以上的操作没有问题，图片(音、视频)的CDN加速也是同样的方法。</p>
<p>比如，你的文章里有本来有一张图片，图片地址为<code>http://xxx.com/123.jpg</code>。把这个图片上传到你的又拍云空间里，即可获得地址：<code>http://xxx.test.upcdn.net/123.jpg</code>，将此地址插入到文章中即可实现图片的CDN加速。而且后期还可以利用又拍云的云处理功能对图片增加缩略图、水印、防盗链，对音视频转解码，压缩等等。</p>
<p>如果你理解以上的原理，可以将其他任何类型(一般加速图片，音频，视频，js，css等)的静态文件的转移到CDN上，从而将你的网站优化的更好。</p>
]]></content>
      
        
        <tags>
            
            <tag> CDN </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在阿里云VPS上部署Hexo]]></title>
      <url>/2017/11/16/hexo.html</url>
      <content type="html"><![CDATA[<p>自双11购入了阿里云的VPS后，一直想着捯饬些什么，首当其冲的就是搭一个博客站点。之前使用过WordPress、Joomla、Drupal、国人的Typecho、Emlog、Zblog等。前几个国外的博客虽然功能、插件、模版丰富，但感觉略显臃肿，过多冗余之处，不适合做个人站点使用，尤其不适合笔者的1G1M的小水管主机。而国人的Typecho、Emlog感觉不错，安装使用简单、占用内存少、界面清新，没有多余的功能，支持Markdown，还原写作本质。但在使用中，出现不少小问题，细节不完善，影响实际体验，遂弃之。直到遇见了<strong>Hexo</strong>……</p>
<a id="more"></a>
<p>Hexo的介绍不再赘述，可以登录其<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">中文官网</a>了解。其实在接触Hexo之前，笔者就对纯静态的博客框架有所了解，比如jekyll、octopress等。与Hexo一样，他们的共同的优点就是部署页面纯静态html，加载速度快、浏览体验好、占用内存小，支持Markdown，当然最重要的一点是<strong>有逼格</strong>。最终放弃Jekyll等等选择Hexo的原因是：相对于Jekyll基于Ruby实现，Hexo基于Node.js，在Windows上安装Node.Js环境更简单，另外，Hexo的主题更符合我的品位。</p>
<p>这类静态博客系统最大的一个缺陷就在于要求用户具有一定的技术水平，Hexo是我见过最难建立的博客系统。网上有很多文章是把Hexo部署到Github或者Coding等，优点是搭建快捷、免费，缺点显而易见，Github远在大洋彼岸，加载速度可想而知，而Coding则是有广告。既然已经有了云主机，当然不能浪费。笔者阅读了网上N多文章及教程，踩过坑，走过弯路，在经历N次的失败后，终于搭建成功。下面就把最简明扼要的过程列出来，谨以此自勉或造福后人。</p>
<hr>
<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><h2 id="VPS及域名"><a href="#VPS及域名" class="headerlink" title="VPS及域名"></a>VPS及域名</h2><p>笔者购买的是阿里云的轻量云服务器，1核1G1M20GSSD，CentOS 7.4系统，搭配<a href="bt.cn">宝塔面板</a>(方便可视化操作)，本文操作过程理论上适用于其他Linux系统。域名需添加A解析记录指向主机IP，域名购买、解析(国内VPS需备案)的过程请自行搜索。</p>
<h2 id="SSH工具"><a href="#SSH工具" class="headerlink" title="SSH工具"></a>SSH工具</h2><p>SSH工具是我们用来以命令行的方式远程操作服务器端。Putty小巧、免费，Xshell功能更强大，但是收费。笔者使用的是Putty，点此下载<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="external">(最新版)</a>，注意本地操作系统，自行下载相应版本安装。如何使用SSH工具连接VPS，请看阿里云的<a href="https://help.aliyun.com/document_detail/59083.html#windows" target="_blank" rel="external">官方教程</a>。</p>
<h1 id="本地端配置"><a href="#本地端配置" class="headerlink" title="本地端配置"></a>本地端配置</h1><p>本地配置很简单，依次安装好Node.js和Git,再安装Hexo即可，Hexo需要前两者的支持。本人是用的win10系统，本地端不需要什么配置，只要安装相应版本即可，Mac或Linux系统应该更容易。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>这里给出Node.js官方下载链接：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">https://nodejs.org/zh-cn/download/</a><br>安装没什么好说的，一路默认下一步即可。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>同样给出Git官方下载链接：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>对应自己的本地系统下载即可，这个套件不仅仅在windows上安装了Git版本控制系统，最重要的是这个套件提供了Git Bash，一个可以在windows上运行的Linux风格shell，除非你够硬核，能忍受win的cmd，否则通过Git Bash使用hexo无疑是最佳选择。下图的选项建议勾选，视觉效果有明显提升。其余选项保持默认即可。</p>
<p><img src="http://shupcd.test.upcdn.net/hexo/git.jpg" alt="git"></p>
<h2 id="安装并熟悉Hexo"><a href="#安装并熟悉Hexo" class="headerlink" title="安装并熟悉Hexo"></a>安装并熟悉Hexo</h2><p>Hexo最好的教程当然是<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>！先不用花时间全看完官方文档，这里稍微说下要点，部署好之后可以仔细研究官方文档。</p>
<p>首先是安装，在Git Bash下输入这条命令就安装Hexo了，简单吧。不过这仅仅是把Hexo的程序写进了系统，网站还没有部署好。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注意：</strong><code>npm</code>在国内被墙了，国内用户需要挂代理，否则输入命令后半天没反应。这里推荐一个最好的办法。每次要用<code>npm</code>命令时，先输入以下命令行。</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>接下来熟悉怎么使用Hexo</p>
<ol>
<li><p>首先建立一个站点</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">hexo init <span class="params">&lt;folder&gt;</span>	<span class="comment">//以folder为目录名建立站点文件夹</span></span><br><span class="line">cd <span class="params">&lt;folder&gt;</span>	<span class="comment">//转移到站点目录</span></span><br><span class="line">npm install	<span class="comment">//安装依赖</span></span><br></pre></td></tr></table></figure>
<p>一个网站对应着一个站点文件夹，这里就是你的整个Hexo博客网站。之后的操作我们都在该站点目录下进行。</p>
<p>以上，也可以先新建一个文件夹，直接右键Git Bash Here。然后<code>hexo init</code>即可。</p>
</li>
<li><p>新建一篇文章</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>
<p>新建立的文章是markdown（以下简称md）文件，熟悉mac的一定知道吧，不熟悉的几分钟就能上手。我们编辑博客就是用编辑md文件实现的。在<code>source/_post</code>目录下，我们看到里面已经有个<code>hello-world.md</code>了。</p>
</li>
<li><p>编辑文章<br>就是编辑你新建的md文件啦。这就需要markdown编辑器喽，当然mac就省事了，对于win系统，Typora和MarkdownPad编辑器，看个人喜好选择。</p>
</li>
<li><p>启动本地服务器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>这条命令会在本地启动服务器，访问地址为<code>localhost:4000</code>，主要是我们正式发布前预览测试用的，启动后你编辑文章和主题等都可以直接更新到该网址，非常方便！但是注意，编辑站点配置文件<code>_config.yml</code>是需要重启该服务器才生效的。现在我们就看下自带<code>hello-world.md</code>的预览效果吧。还是蛮酷炫的吧！</p>
<p><img src="http://shupcd.test.upcdn.net/hexo/hello.png" alt="hello"></p>
<p>这里有个坑吐槽一下，若Win安装了福某PDF阅读器会占用4000端口，需要用<code>hexo s -p 5000</code>命令把端口换成5000来执行启动。</p>
</li>
<li><p>生成静态文件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<p>这条命令是由各种md文件和资源生成可部署的静态html页面等，生成的资源都放在新生成的<code>public</code>目录下。</p>
</li>
<li><p>部署到服务器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>部署方式有多种，对这篇文章来说，就是利用Git部署到你的VPS服务器了，当然在这输入是没卵用的~还没配置服务器端。</p>
</li>
</ol>
<p>掌握以上命令基本就OK了，还有一条<code>hexo clean</code>用来清理缓存，其他的一般用不到，有兴趣的再看<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>。接下来我们看VPS服务器端配置。</p>
<h1 id="VPS服务器端配置"><a href="#VPS服务器端配置" class="headerlink" title="VPS服务器端配置"></a>VPS服务器端配置</h1><p>这一部分的配置就用之前说的Xshell或putty来搞定！</p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建用户用于服务器端站点管理，如下：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">adduser hexo	<span class="comment">//创建用户</span></span><br><span class="line">passwd hexo	<span class="comment">//设置密码</span></span><br><span class="line"><span class="keyword">su</span>	<span class="comment">//检查是否有安装sudo</span></span><br></pre></td></tr></table></figure>
<p>有的linux系统初始没安装<code>sudo</code>，为了方便，我们需要安装<code>sudo</code>，已有安装的话，跳过这步。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> sudo</span><br></pre></td></tr></table></figure>
<p>再次，为了方便，赋予hexo用户root权限，使用vi命令在<code>/etc/sudoers</code>中添加一行。不会vim编辑临时搜一下，简单，当然也可以通过<strong>宝塔面板</strong>进行可视化操作。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure>
<p>找到这一行添加：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">root        <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       <span class="keyword">ALL</span></span><br><span class="line">hexo        <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       <span class="keyword">ALL</span> #这个是添加的</span><br></pre></td></tr></table></figure>
<h2 id="配置本地端无密码ssh登录服务端"><a href="#配置本地端无密码ssh登录服务端" class="headerlink" title="配置本地端无密码ssh登录服务端"></a>配置本地端无密码ssh登录服务端</h2><p>这里为什么要用到Git呢？因为这里的Hexo发布博客是用Git来部署的，而Git又是基于ssh连接的，所以实现一键发布博客就得配置这玩意了。其实很简单，有的教程复杂化了，注意这里最后一步是在本地端操作。</p>
<ol>
<li><p><strong>服务器端</strong>生成ssh密钥</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">su hexo</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/home/hexo</span></span><br><span class="line">mkdir <span class="string">.ssh</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">.ssh</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>在生成密钥时，会要求你输入一个加密密码，可以不填写(一路回车)，实现无密码登陆。完成后会在<code>/home/hexo/.ssh/</code>文件夹下生成2个key，一个公钥<code>id_rsa.pub</code>，一个私钥<code>id_rsa</code>，编辑此文件夹中的<code>authorized_keys</code>文件(如没有则新建一个)，把公钥里面的内容全部复制粘贴进去(包含公钥开头的ssh-rsa)。然后把公钥和私钥2个文件下载到本地，后面会用到。</p>
</li>
<li><p><strong>服务器端</strong>确保配置及权限正确(这一步仅为确保，可暂时忽略，若后面ssh连接不成功可返回此步骤检查)</p>
<p>查看<code>/etc/ssh/sshd_config</code>文件配置是否如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">HostKey</span> <span class="string">/etc/ssh/ssh_host_rsa_key</span></span><br><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span> </span><br><span class="line"><span class="string">PubkeyAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">AuthorizedKeysFile</span>      <span class="string">.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<p>确保用户<code>hexo</code>及<code>.ssh</code>文件夹及相关密钥文件权限正确</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">chown -R <span class="string">hexo:</span>hexo <span class="regexp">/home/</span>hexo</span><br><span class="line">chmod <span class="number">700</span> <span class="regexp">/home/</span>hexo</span><br><span class="line">chmod <span class="number">700</span> <span class="regexp">/home/</span>hexo/.ssh</span><br><span class="line">chmod <span class="number">644</span> <span class="regexp">/home/</span>hexo<span class="regexp">/.ssh/</span>authorized_keys  <span class="comment">//公钥文件的所有权限</span></span><br><span class="line">chmod <span class="number">600</span> <span class="regexp">/home/</span>hexo<span class="regexp">/.ssh/</span>id_rsa        <span class="comment">//私钥文件的所有权限</span></span><br></pre></td></tr></table></figure>
<p>查看是否有安装ssh并安装，没有的话使用yum安装</p>
<p><img src="http://shupcd.test.upcdn.net/hexo/ssh1.png" alt="ssh1"></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">rpm -qa |<span class="keyword">grep</span> ssh <span class="comment">//检查是否有ssh</span></span><br><span class="line">yum install ssh <span class="comment">//如果没有ssh运行，则执行此命令安装ssh</span></span><br></pre></td></tr></table></figure>
<p>安装完后启动服务</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">service sshd <span class="built_in">start</span></span><br><span class="line">service sshd status<span class="comment"> //检查是否已启动，看到running即可</span></span><br></pre></td></tr></table></figure>
<p><img src="http://shupcd.test.upcdn.net/hexo/ssh-run.png" alt="ssh-run"></p>
</li>
<li><p><strong>本地端</strong>ssh配置 </p>
<p>打开Git Bash，输入<code>pwd</code>查看本地用户的文件夹地址，如下图，一般默认在<code>C:\User\你的账户名</code>。然后打开用户文件夹里的<code>.ssh</code>文件夹，把刚刚从服务器上下载到本地的两个密钥文件拷贝进去。</p>
<p><img src="http://shupcd.test.upcdn.net/hexo/pwd.png" alt="pwd"></p>
</li>
<li><p><strong>本地端</strong>ssh验证</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">ssh hexo<span class="meta">@你的域名或者IP</span> //<span class="meta">@前是你创建的站点管理用户</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>OK，无密码ssh登陆完成，配置过程注意是在本地端还是服务器端操作。如果连接不成功，返回上述第2步检查。</p>
<h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><p>简单来说，nginx是代理服务器，有它我们就能按照域名或IP访问网页了。</p>
<ol>
<li><p>添加nginx源，安装nginx<br>在<code>/etc/yum.repos.d</code>目录下创建一个yum源文件<code>nginx.repo</code>,用vi编辑或用宝塔写入如下内容。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line"><span class="attr">name</span>=nginx repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>安装nginx(宝塔里面也有一键安装nginx，不过这种方式更简单)</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">yum install nginx -<span class="built_in">y</span></span><br><span class="line">nginx -v <span class="comment">//查看版本号验证</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除原配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*</span><br></pre></td></tr></table></figure>
<p>重新配置，添加以下内容到<code>/etc/nginx/conf.d/hexo.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">root</span> /home/hexo/www;  <span class="comment">#网站根目录,用来存储网站文件，后面会创建</span></span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  <span class="attribute">server_name</span> www.shup.cn;   <span class="comment">#你的域名</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到没，这一步将你的域名和服务器下的网站根目录挂钩，主页是根目录下index.html<br><strong>很关键！！</strong></p>
</li>
<li><p>修改nginx配置文件<br>将<code>/etc/nginx/nginx.conf</code>中第一行的user值修改为hexo</p>
</li>
<li><p>切换到hexo用户，用户主目录下新建<code>www</code>文件夹作为网站根目录</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">su</span> hexo</span><br><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line"><span class="keyword">mkdir</span> www</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证配置是否正确，如下图。</p>
<p><img src="http://shupcd.test.upcdn.net/hexo/nginx.png" alt="nginx"></p>
</li>
<li><p>启动nginx服务并测试</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo service nginx start</span><br><span class="line">echo <span class="string">"hello nginx"</span> &gt; <span class="regexp">/home/</span>hexo<span class="regexp">/www/i</span>ndex.html	<span class="regexp">//</span>站点根目录下新建index.html</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入你的<strong>域名</strong>或VPS的<strong>IP地址</strong>，出现<strong>hello nginx</strong>字样表示nginx代理服务器搭建成功！</p>
</li>
</ol>
<h2 id="安装配置Git"><a href="#安装配置Git" class="headerlink" title="安装配置Git"></a>安装配置Git</h2><p>即将完成任务~</p>
<ol>
<li><p>安装Git</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化Git仓库<br>用户主目录下新建hexo.git文件夹用作Git仓库并初始化</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir hexo.git</span><br><span class="line">cd hexo.git</span><br><span class="line">git init --bare	<span class="comment">//初始化git仓库，bare表示空仓库</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Git仓库的hooks</p>
<p>hooks，钩子，就是将不同目录的数据实现同步。具体如下，在Git仓库hooks目录下创建文件<code>post-receive</code>并修改权限</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> hooks</span><br><span class="line">touch <span class="keyword">post</span>-receive</span><br><span class="line">chmod 755 <span class="keyword">post</span>-receive</span><br></pre></td></tr></table></figure>
<p>将以下内容添加到<code>post-receive</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GIT_REPO=/home/hexo/hexo.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/HexoBlog</span><br><span class="line">PUBLIC_WWW=/home/hexo/www</span><br><span class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至此，服务器端的配置全部完成。</p>
<h1 id="本地端部署验证"><a href="#本地端部署验证" class="headerlink" title="本地端部署验证"></a>本地端部署验证</h1><p>接下来我们就试试把博客发布到VPS服务器吧！下面都是<strong>本地端</strong>的操作。</p>
<h2 id="安装hexo-git部署模块"><a href="#安装hexo-git部署模块" class="headerlink" title="安装hexo git部署模块"></a>安装hexo git部署模块</h2><p>国内用户别忘记挂代理。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="修改站点配置文件-config-yml"><a href="#修改站点配置文件-config-yml" class="headerlink" title="修改站点配置文件_config.yml"></a>修改站点配置文件_config.yml</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site <span class="keyword">is</span> <span class="keyword">put</span> in <span class="keyword">a</span> subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="built_in">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">ur<span class="variable">l:</span> http://www.shup.<span class="keyword">cn</span>	#这里修改你的网址或者IP</span><br><span class="line">roo<span class="variable">t:</span> /</span><br></pre></td></tr></table></figure>
<p>部署项配置：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git	#部署方式</span><br><span class="line">  <span class="attribute">repo</span>: hexo<span class="variable">@www</span>.shup.<span class="attribute">cn</span>:/home/hexo/hexo.git #@符号之前是服务器的管理用户，之后是服务器的git仓库路径</span><br><span class="line">  <span class="attribute">branch</span>: master	#分支，我们只用主分支即可</span><br></pre></td></tr></table></figure>
<h2 id="部署验证"><a href="#部署验证" class="headerlink" title="部署验证"></a>部署验证</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hexo clean	<span class="comment">//清除缓存（实际是删除db.json和public文件夹）</span></span><br><span class="line">hexo g	<span class="comment">//生成静态页面（public文件夹）</span></span><br><span class="line">hexo d	<span class="comment">//部署到服务器</span></span><br></pre></td></tr></table></figure>
<p>OK，完结撒花，浏览器输入你的域名看看吧！</p>
<p>其实就是最初给你预览的helloworld，只不过它搬到服务器了！</p>
<p>以后我们发布博客就用我讲解Hexo那一章的第2-6步就可以了，甚至可以用<strong>hexo g -d</strong>来一键生成发布！这样你就可以专心写md了，发布只是一个命令的事！</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
