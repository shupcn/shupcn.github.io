<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Valine插件为Hexo博客添加评论功能]]></title>
    <url>%2F2017%2F11%2F21%2Fvaline.html</url>
    <content type="text"><![CDATA[试用过Hexo内置的多说、畅言、有言、disqus、gitment等评论系统后，还是觉得Valine最好、最适合Hexo的风格。 放弃其他几个系统，主要原因有以下： 多说 - 这个不必多说，已经关闭； 畅言 - 搜狐出品，应该不错，不过域名需要备案才可以使用，是一个不小的门槛； 有言 - 看起来很不错，不过使用过程中遇到多次无法在页面中正常加载的情况，不稳定； disqus和gitment - 一句话，远在大洋彼岸不适合国内使用。 Valine简介 Valine(官网)是一款基于Leancloud的快速、简洁且高效的无后端评论系统。 特性 快速 安全 无后端实现 MarkDown 全语法支持 轻量易用(~15kb gzipped) Valine使用获取appid和appkey请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用，选择免费的开发版即可。注意右上角有几个节点，可以就近选择。 应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的appid和appkey了： 为了数据安全，请注意设置自己的安全域名： Hexo-NexT中的开启和设置Hexo-NexT中已经默认安装了Valine插件，如果没有可以使用以下命令安装： 1npm install valine --save 完成后，在NexT主题配置文件中加入/修改代码以开启： 12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true # 是否开启 appid: # 填上之前获取的AppID appkey: # 填上之前获取的AppKey notify: false # 新留言是否需要通知 https://github.com/xCss/Valine/wiki verify: false # 是否需要验证，验证比较反人类建议false关闭 placeholder: 请在此输入您的留言 # 默认留言框内的文字 avatar: mm # 默认头像 guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息 pageSize: 10 # pagination size OK，至此已经已经完成配置并成功开启，Hexo g -d赶紧去看效果吧。 后期如果需要管理留言，至leancloud/控制台/储存/comment即可进行添加、删除等操作。]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用又拍云CDN加速Hexo博客]]></title>
    <url>%2F2017%2F11%2F21%2Fcdn.html</url>
    <content type="text"><![CDATA[辛辛苦苦搭建好博客，虽然Hexo本身是全静态网页，页面加载速度相对于动态博客程序已经是非常可观，但NexT主题调用了不少js文件，如果再加上其他的图片、插件等等还是会一定程度上造成延迟。本着折腾不止和完美主义的精神，继续用CDN来加速Hexo的载入速度。 CDN加速的原理这里简明扼要地解释一下CDN加速的原理：把你的上传到CDN加速网站(如又拍或者七牛)空间里的文件(或者网站)以镜像的形式存放到多台服务器，这些服务器分布在祖国甚至全世界各地，访问者就近读取较快的镜像，以实现快速加载的效果。举个栗子：你的文件(或网站)在上海，没有CDN，一个北京的访问者需要直接连接你在上海的服务器，有了CDN，这个北京的访问者只需要访问你的文件(网站)在北京的镜像即可。尤其是国内外的互访，CDN可使访问速度大大提升。 哪些因素会影响加载速度？js文件js文件就是JavaScript脚本文件，用来实现各种动态酷炫的效果。一般是加载在html页面的&lt;head&gt;部分，所以页面加载首先要考虑这一块。Hexo的js文件大致包含以下3类： 公共js公共js是通用型的js，比如实现图片放大效果的Fancybox，或者实现图片慢加载的LazyLoad等等。这些js已经开发好，直接在页面html里引用(存放在镜像网站上，如BootCDN)的js文件链接即可实现效果。 页面效果js即NexT主题中定制的某些特效，例如实现页面响应式效果的Bootstrap，或者增强移动端滚动及动画效果的motion等等。这些js理论上也是公共js，只不过NexT主题作者修改了部分代码，以适应NexT主题。这些js文件存放在本地Hexo目录下hexo\themes\next\source\js\src 功能插件js这个不用多说了吧，Hexo默认安装了不少实用的第三方插件，比如。不过默认没有开启，需要在主题配置文件_config.yml中开启。这些js文件一部分存放在hexo\themes\next\layout\_third-party中，一部分通过引用外部链接形式。图片所有图片文件不管大小，都会影响页面的加载速度。这个不多说了。Google字体引用很多文章中提到，由于被墙的缘故，引用Google字体会严重拖累网站，于是乎屏蔽Google字体的插件层出不穷。不过笔者测试发现，无论是Google字体官网，还是Google字体的引用服务器fonts.googleapis.com都没有被墙，而其速度在全球范围内都相当理想(如下图)，所以完全没有必要修改Google字体的引用源，比如改成360CDN什么的。 综上，下面就开始着手对Hexo博客的js文件和图片文件进行CDN加速。 CDN加速公共js加速在版本 5.0.1 之后的NexT主题，有一个方便的功能可以通过修改主题配置文件_config.yml中常用外部js的引用地址，来实现自定义CDN加速。下面是此部分的配置(在_config.yml搜索CDN即可找到)，笔者已经修改成BootCDN的引用地址。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js fancybox_css: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: https://cdn.bootcss.com/UAParser.js/0.7.9/ua-parser.min.js # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: https://cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Or use direct links below: # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css pace: https://cdn.bootcss.com/pace/1.0.2/pace.js pace_css: https://cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css 下图可以看到加速的效果非常好(使用Chrome浏览器开发者工具-&gt;Network，按住Shift+刷新)！修改前首页加载需要10秒以上，其中尤其index.js(即JQuery.js)严重拖累了加载速度。修改之后，基本上就是秒开！ 页面效果js加速这些js文件存放在本地，原则上把它们上传到CDN加速空间中，再修改引用源即可。但基于以下原因考虑，这里我们不做修改。 这些js文件对加载速度影响不大 如果主题更新又会恢复到原始状态 修改引用源比较麻烦(哈哈~主要是因为这点) 功能插件js加速同样道理，这些js文件若是存放在Hexo本地的，需要将他们上传到CDN加速网站的空间里；如果是外部引用，需要先将引用地址的原js文件下载下来，存放到CDN加速空间里。最后修改原引用地址到CDN加速空间地址。下面以又拍云的CDN加速空间为例介绍，注册开通很简单，这里略过。需要注意不管七牛还是又拍，注册时都需要上传手持身份证的照片进行身份核验。身份认证后即可开始操作，具体操作方案请参考官方文档。简单说两句：创建的服务选择网页图片类型，然后添加操作员、密码即可，后面如有需要还可以绑定域名(需备案)，添加https等等。 一切就绪后，下面以加速valine.js插件为例说明。Valine是一款评论插件，安装及配置请参考#使用Valine插件为Hexo博客添加评论功能。 安装并开启Valine后，我们打开hexo\themes\next\layout\_third-party\comments\valine.js可以看到如下代码： 12&lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt; 可以看出Valine的运行是依赖以上2个外部js文件，我们来加速第二个js文件，修改第二个js文件的源为： 1&lt;script src=&quot;//XXX.test.upcdn.net/Valine.min.js&quot;&gt;&lt;/script&gt; # XXX改成你的又拍云服务名 然后，把原js文件Valine.min.js、即https://unpkg.com/valine/dist/Valine.min.js下载下来，通过FTP工具(推荐FileZilla)上传到你的又拍云空间根目录里。 这样，Valine.min.js这个文件就可以用又拍云进行CDN加速了。Hexo g -d查看效果吧。其他插件js加速理论上适用同样方法，关键是第一步要找到js文件正真的源引用地址。 图片加速其实如果以上的操作没有问题，图片的CDN加速也是同样的方法。 比如，你的文章里有一张图片，图片地址为http://xxx.com/123.jpg。把这个图片上传到你的又拍云空间里，即可获得地址http://xxx.test.upcdn.net/123.jpg，将此地址插入到文章中即可实现图片的CDN加速。 如果你理解以上的原理，可以将其他任何类型的文件的转移到CDN上，从而将你的网站优化的更好。]]></content>
      <tags>
        <tag>CDN</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在阿里云VPS上部署Hexo]]></title>
    <url>%2F2017%2F11%2F16%2Fhexo.html</url>
    <content type="text"><![CDATA[自双11购入了阿里云的VPS后，一直想着捯饬些什么，首当其冲的就是搭一个博客站点。之前使用过WordPress、Joomla、Drupal、国人的Typecho、Emlog、Zblog等。前几个国外的博客虽然功能、插件、模版丰富，但感觉略显臃肿，过多冗余之处，不适合做个人站点使用，尤其不适合笔者的1G1M的小水管主机。而国人的Typecho、Emlog感觉不错，安装使用简单、占用内存少、界面清新，没有多余的功能，支持Markdown，还原写作本质。但在使用中，出现不少小问题，细节不完善，影响实际体验，遂弃之。直到遇见了Hexo…… Hexo的介绍不再赘述，可以登录其中文官网了解。其实在接触Hexo之前，笔者就对纯静态的博客框架有所了解，比如jekyll、octopress等。与Hexo一样，他们的共同的优点就是部署页面纯静态html，加载速度快、浏览体验好、占用内存小，支持Markdown，当然最重要的一点是有逼格。最终放弃Jekyll等等选择Hexo的原因是：相对于Jekyll基于Ruby实现，Hexo基于Node.js，在Windows上安装Node.Js环境更简单，另外，Hexo的主题更符合我的品位。 这类静态博客系统最大的一个缺陷就在于要求用户具有一定的技术水平，Hexo是我见过最难建立的博客系统。网上有很多文章是把Hexo部署到Github或者Coding等，优点是搭建快捷、免费，缺点显而易见，Github远在大洋彼岸，加载速度可想而知，而Coding则是有广告。既然已经有了云主机，当然不能浪费。笔者阅读了网上N多文章及教程，踩过坑，走过弯路，在经历N次的失败后，终于搭建成功。下面就把最简明扼要的过程列出来，谨以此自勉或造福后人。 准备条件VPS及域名笔者购买的是阿里云的轻量云服务器，1核1G1M20GSSD，CentOS 7.4系统，搭配宝塔面板(方便可视化操作)，本文操作过程理论上适用于其他Linux系统。域名需添加A解析记录指向主机IP，域名购买、解析(国内VPS需备案)的过程请自行搜索。 SSH工具SSH工具是我们用来以命令行的方式远程操作服务器端。Putty小巧、免费，Xshell功能更强大，但是收费。笔者使用的是Putty，点此下载(最新版)，注意本地操作系统，自行下载相应版本安装。如何使用SSH工具连接VPS，请看阿里云的官方教程。 本地端配置本地配置很简单，依次安装好Node.js和Git,再安装Hexo即可，Hexo需要前两者的支持。本人是用的win10系统，本地端不需要什么配置，只要安装相应版本即可，Mac或Linux系统应该更容易。 安装Node.js这里给出Node.js官方下载链接：https://nodejs.org/zh-cn/download/安装没什么好说的，一路默认下一步即可。 安装Git同样给出Git官方下载链接：https://git-scm.com/downloads对应自己的本地系统下载即可，这个套件不仅仅在windows上安装了Git版本控制系统，最重要的是这个套件提供了Git Bash，一个可以在windows上运行的Linux风格shell，除非你够硬核，能忍受win的cmd，否则通过Git Bash使用hexo无疑是最佳选择。下图的选项建议勾选，视觉效果有明显提升。其余选项保持默认即可。 安装并熟悉HexoHexo最好的教程当然是官方文档！先不用花时间全看完官方文档，这里稍微说下要点，部署好之后可以仔细研究官方文档。 首先是安装，在Git Bash下输入这条命令就安装Hexo了，简单吧。不过这仅仅是把Hexo的程序写进了系统，网站还没有部署好。 1npm install -g hexo-cli 注意：npm在国内被墙了，国内用户需要挂代理，否则输入命令后半天没反应。这里推荐一个最好的办法。每次要用npm命令时，先输入以下命令行。 1npm config set registry https://registry.npm.taobao.org 接下来熟悉怎么使用Hexo 首先建立一个站点 123hexo init &lt;folder&gt; //以folder为目录名建立站点文件夹cd &lt;folder&gt; //转移到站点目录npm install //安装依赖 一个网站对应着一个站点文件夹，这里就是你的整个Hexo博客网站。之后的操作我们都在该站点目录下进行。 以上，也可以先新建一个文件夹，直接右键Git Bash Here。然后hexo init即可。 新建一篇文章 1hexo new &lt;title&gt; 新建立的文章是markdown（以下简称md）文件，熟悉mac的一定知道吧，不熟悉的几分钟就能上手。我们编辑博客就是用编辑md文件实现的。在source/_post目录下，我们看到里面已经有个hello-world.md了。 编辑文章就是编辑你新建的md文件啦。这就需要markdown编辑器喽，当然mac就省事了，对于win系统，Typora和MarkdownPad编辑器，看个人喜好选择。 启动本地服务器 1hexo s 这条命令会在本地启动服务器，访问地址为localhost:4000，主要是我们正式发布前预览测试用的，启动后你编辑文章和主题等都可以直接更新到该网址，非常方便！但是注意，编辑站点配置文件_config.yml是需要重启该服务器才生效的。现在我们就看下自带hello-world.md的预览效果吧。还是蛮酷炫的吧！ 这里有个坑吐槽一下，若Win安装了福某PDF阅读器会占用4000端口，需要用hexo s -p 5000命令把端口换成5000来执行启动。 生成静态文件 1hexo g 这条命令是由各种md文件和资源生成可部署的静态html页面等，生成的资源都放在新生成的public目录下。 部署到服务器 1hexo d 部署方式有多种，对这篇文章来说，就是利用Git部署到你的VPS服务器了，当然在这输入是没卵用的~还没配置服务器端。 掌握以上命令基本就OK了，还有一条hexo clean用来清理缓存，其他的一般用不到，有兴趣的再看官方文档。接下来我们看VPS服务器端配置。 VPS服务器端配置这一部分的配置就用之前说的Xshell或putty来搞定！ 创建用户创建用户用于服务器端站点管理，如下： 123adduser hexo //创建用户passwd hexo //设置密码su //检查是否有安装sudo 有的linux系统初始没安装sudo，为了方便，我们需要安装sudo，已有安装的话，跳过这步。 1yum install sudo 再次，为了方便，赋予hexo用户root权限，使用vi命令在/etc/sudoers中添加一行。不会vim编辑临时搜一下，简单，当然也可以通过宝塔面板进行可视化操作。 1vi /etc/sudoers 找到这一行添加： 12root ALL=(ALL) ALLhexo ALL=(ALL) ALL #这个是添加的 配置本地端无密码ssh登录服务端这里为什么要用到Git呢？因为这里的Hexo发布博客是用Git来部署的，而Git又是基于ssh连接的，所以实现一键发布博客就得配置这玩意了。其实很简单，有的教程复杂化了，注意这里最后一步是在本地端操作。 服务器端生成ssh密钥 12345su hexocd /home/hexomkdir .sshcd .sshssh-keygen -t rsa 在生成密钥时，会要求你输入一个加密密码，可以不填写(一路回车)，实现无密码登陆。完成后会在/home/hexo/.ssh/文件夹下生成2个key，一个公钥id_rsa.pub，一个私钥id_rsa，编辑此文件夹中的authorized_keys文件(如没有则新建一个)，把公钥里面的内容全部复制粘贴进去(包含公钥开头的ssh-rsa)。然后把公钥和私钥2个文件下载到本地，后面会用到。 服务器端确保配置及权限正确(这一步仅为确保，可暂时忽略，若后面ssh连接不成功可返回此步骤检查) 查看/etc/ssh/sshd_config文件配置是否如下： 1234HostKey /etc/ssh/ssh_host_rsa_keyRSAAuthentication yes PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 确保用户hexo及.ssh文件夹及相关密钥文件权限正确 12345chown -R hexo:hexo /home/hexochmod 700 /home/hexochmod 700 /home/hexo/.sshchmod 644 /home/hexo/.ssh/authorized_keys //公钥文件的所有权限chmod 600 /home/hexo/.ssh/id_rsa //私钥文件的所有权限 查看是否有安装ssh并安装，没有的话使用yum安装 12rpm -qa |grep ssh //检查是否有sshyum install ssh //如果没有ssh运行，则执行此命令安装ssh 安装完后启动服务 12service sshd startservice sshd status //检查是否已启动，看到running即可 本地端ssh配置 打开Git Bash，输入pwd查看本地用户的文件夹地址，如下图，一般默认在C:\User\你的账户名。然后打开用户文件夹里的.ssh文件夹，把刚刚从服务器上下载到本地的两个密钥文件拷贝进去。 本地端ssh验证 1ssh hexo@你的域名或者IP //@前是你创建的站点管理用户 OK，无密码ssh登陆完成，配置过程注意是在本地端还是服务器端操作。如果连接不成功，返回上述第2步检查。 安装配置nginx简单来说，nginx是代理服务器，有它我们就能按照域名或IP访问网页了。 添加nginx源，安装nginx在/etc/yum.repos.d目录下创建一个yum源文件nginx.repo,用vi编辑或用宝塔写入如下内容。 12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 安装nginx(宝塔里面也有一键安装nginx，不过这种方式更简单) 12yum install nginx -ynginx -v //查看版本号验证 删除原配置文件 1rm /etc/nginx/conf.d/* 重新配置，添加以下内容到/etc/nginx/conf.d/hexo.conf 12345678server &#123; root /home/hexo/www; #网站根目录,用来存储网站文件，后面会创建 index index.html index.htm; server_name www.shup.cn; #你的域名 location / &#123; try_files $uri $uri/ /index.html; &#125;&#125; 看到没，这一步将你的域名和服务器下的网站根目录挂钩，主页是根目录下index.html很关键！！ 修改nginx配置文件将/etc/nginx/nginx.conf中第一行的user值修改为hexo 切换到hexo用户，用户主目录下新建www文件夹作为网站根目录 123su hexocd ~mkdir www 验证配置是否正确，如下图。 启动nginx服务并测试 12sudo service nginx startecho &quot;hello nginx&quot; &gt; /home/hexo/www/index.html //站点根目录下新建index.html 在浏览器中输入你的域名或VPS的IP地址，出现hello nginx字样表示nginx代理服务器搭建成功！ 安装配置Git即将完成任务~ 安装Git 1sudo yum install git 初始化Git仓库用户主目录下新建hexo.git文件夹用作Git仓库并初始化 1234cd ~mkdir hexo.gitcd hexo.gitgit init --bare //初始化git仓库，bare表示空仓库 配置Git仓库的hooks hooks，钩子，就是将不同目录的数据实现同步。具体如下，在Git仓库hooks目录下创建文件post-receive并修改权限 123cd hookstouch post-receivechmod 755 post-receive 将以下内容添加到post-receive中 12345678#!/bin/bashGIT_REPO=/home/hexo/hexo.gitTMP_GIT_CLONE=/tmp/HexoBlogPUBLIC_WWW=/home/hexo/wwwrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 至此，服务器端的配置全部完成。 本地端部署验证接下来我们就试试把博客发布到VPS服务器吧！下面都是本地端的操作。 安装hexo git部署模块国内用户别忘记挂代理。 1npm install hexo-deployer-git --save 修改站点配置文件_config.yml1234# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://www.shup.cn #这里修改你的网址或者IProot: / 部署项配置： 1234deploy: type: git #部署方式 repo: hexo@www.shup.cn:/home/hexo/hexo.git #@符号之前是服务器的管理用户，之后是服务器的git仓库路径 branch: master #分支，我们只用主分支即可 部署验证123hexo clean //清除缓存（实际是删除db.json和public文件夹）hexo g //生成静态页面（public文件夹）hexo d //部署到服务器 OK，完结撒花，浏览器输入你的域名看看吧！ 其实就是最初给你预览的helloworld，只不过它搬到服务器了！ 以后我们发布博客就用我讲解Hexo那一章的第2-6步就可以了，甚至可以用hexo g -d来一键生成发布！这样你就可以专心写md了，发布只是一个命令的事！]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS/Ubuntu一键安装IPSEC/IKEV2 科学上网[翻墙]服务器]]></title>
    <url>%2F2017%2F11%2F15%2Ffanqiang.html</url>
    <content type="text"><![CDATA[买了香港或者国外的VPS不用来做科(V)学(P)上(N)网，简直太浪费了。这篇文章整理成了一份一键安装的脚本。适用于WindowsPhone,iOS,Android和PC设备。有需要的童鞋可以拿来食用~ ~ ~ ~ CentOS测试了下貌似没什么问题，Ubuntu的手里暂时没有空闲vps就没试了，其实也差不多的。 安装说明用法很简单：总结成一句话就是：除了类型要选对以外，其他的一路回车就好了 特性 服务端要求：Ubuntu或者CentOS-6/7或者Debian 客户端： iOS/OSX=&gt;ikev1,ikev2 Andriod=&gt;ikev1 WindowsPhone=&gt;ikev2 其他Windows平台=&gt;ikev2 可使用自己的私钥和根证书，也可自动生成 证书可绑定域名或ip 要是图方便可一路回车 最近更新 添加SSL证书自动申请自动更新并应用于IKEv2的解决方案,详见这篇博文:SSL证书自动更新并应用到IKEv2, Nginx ; 添加对CentOS7的firewall防火墙的支持; 使用ip address替换已被废弃的ifconfig; 生成单独的sysctl配置文件/etc/sysctl.d/10-ipsec.conf单独加载，用于开启ipv4转发(如以后卸载或需要关闭net.ipv4.ip_forward,请记得删除此文件); 升级strongswan版本到5.5.1,解决iOS9和iOS10的兼容性问题(感谢caasiu的提醒#21); 添加导入SSL证书的支持,安装时可选使用证书颁发机构签发的证书还是生成自签名证书; 服务端安装说明 下载脚本: 1wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh 注:如需使用其他分支的脚本,请将上述url中的master修改为分支名称,各分支区别详见本页的分支说明节点 运行脚本： 12chmod +x one-key-ikev2.shbash one-key-ikev2.sh 等待自动配置部分内容后，选择VPS类型（OpenVZ还是Xen、KVM），选错将无法成功连接，请务必核实服务器的类型。输入服务器ip或者绑定的域名(连接vpn时服务器地址将需要与此保持一致,如果是导入泛域名证书这里需要写*.域名的形式)； 选择使用使用证书颁发机构签发的SSL证书还是生成自签名证书： 如果选择no,使用自签名证书（客户端如果使用IkeV2方式连接，将需要导入生成的证书并信任）则需要填写证书的相关信息(C,O,CN)，为空将使用默认值(default value)，确认无误后按任意键继续,后续安装过程中会出现输入两次pkcs12证书的密码的提示(可以设置为空) 如果选择yes，使用SSL证书（如果证书是被信任的，后续步骤客户端将无需导入证书）请在继续下一步之前，将以下文件按提示命名并放在脚本相同的目录下（SSL证书详细配置和自动续期方案可见这里）： ca.cert.pem 证书颁发机构的CA，比如Let‘s Encrypt的证书,或者其他链证书； server.cert.pem 签发的域名证书； server.pem 签发域名证书时用的私钥； 是否使用SNAT规则(可选).默认为不使用.使用前请确保服务器具有不变的静态公网ip,可提升防火墙对数据包的处理速度.如果服务器网络设置了NAT(如AWS的弹性ip机制),则填写网卡连接接口的ip地址(参见KinonC提供的方案:#36). 防火墙配置.默认配置iptables(如果使用的是firewall(如CentOS7)请选择yes自动配置firewall,将无视SNAT并跳过后续的补充网卡接口步骤).补充网卡接口信息,为空则使用默认值(Xen、KVM默认使用eth0,OpenVZ默认使用venet0).如果服务器使用其他公网接口需要在此指定接口名称,填写错误VPN连接后将无法访问外网) 看到install Complete字样即表示安装完成。默认用户名密码将以黄字显示，可根据提示自行修改配置文件中的用户名密码,多用户则在配置文件中按格式一行一个(多用户时用户名不能使用%any),保存并重启服务生效。 将提示信息中的证书文件ca.cert.pem拷贝到客户端，修改后缀名为.cer后导入。ios设备使用Ikev1无需导入证书，而是需要在连接时输入共享密钥，共享密钥即是提示信息中的黄字PSK. 客户端配置说明 连接的服务器地址和证书保持一致,即取决于签发证书ca.cert.pem时使用的是ip还是域名; Android/iOS/OSX 可使用ikeV1,认证方式为用户名+密码+预共享密钥(PSK); iOS/OSX/Windows7+/WindowsPhone8.1+/Linux 均可使用IkeV2,认证方式为用户名+密码。使用SSL证书则无需导入证书；使用自签名证书则需要先导入证书才能连接,可将ca.cert.pem更改后缀名作为邮件附件发送给客户端,手机端也可通过浏览器导入,其中: iOS/OSX 的远程ID和服务器地址保持一致,用户鉴定选择”用户名”.如果通过浏览器导入,将证书放在可访问的远程外链上,并在系统浏览器(Safari)中访问外链地址; Windows PC 系统导入证书需要导入到“本地计算机”的”受信任的根证书颁发机构”,以”当前用户”的导入方式是无效的.推荐运行mmc添加本地计算机的证书管理单元来操作; WindowsPhone8.1 登录时的用户名需要带上域信息,即wp”关于”页面的设备名称\用户名,也可以使用%any %any : EAP “密码”进行任意用户名登录,但指定了就不能添加其他用户名了. WindowsPhone10 的vpn还存在bug(截至10586.164),ikeV2方式可连接但系统流量不会走vpn,只能等微软解决. (截至14393.5 ,此bug已经得到修复,现在WP10已经可以正常使用IkeV2.) Windows10也存在此bug,部分Win10系统连接后ip不变,没有自动添加路由表,使用以下方法可解决: 手动关闭vpn的split tunneling功能(在远程网络上使用默认网关); 也可使用powershell修改,进入CMD窗口,运行如下命令: 12345powershell #进入ps控制台get-vpnconnection #检查vpn连接的设置（包括vpn连接的名称）set-vpnconnection &quot;vpn连接名称&quot; -splittunneling $false #关闭split tunnelingget-vpnconnection #检查修改结果exit #退出ps控制台 卸载方式 进入脚本所在目录的strongswan文件夹执行: 1make uninstall 删除脚本所在目录的相关文件(one-key-ikev2.sh,strongswan.tar.gz,strongswan文件夹,my_key文件夹). 卸载后记得检查iptables配置. 分支说明 master分支:经过测试的相对稳定的版本; dev-debian分支:Debian6/7测试分支,该脚本由bestoa修改提供; dev分支:开发分支,使用最新版本的strongswan,未进过充分测试,用于尝试和添加一些新的功能,未来可能添加对L2TP的兼容支持,以及对ipv6的支持; 部分问题解决方案 ipsec启动问题：服务器重启后默认ipsec不会自启动，请命令手动开启,或添加/usr/local/sbin/ipsec start到自启动脚本文件中(如rc.local等)： 1ipsec start ipsec常用指令: 123456ipsec start #启动服务ipsec stop #关闭服务ipsec restart #重启服务ipsec reload #重新读取ipsec status #查看状态ipsec --help #查看帮助 可连接但是无法访问网络： 检查iptables是否正常启用,检查iptables规则是否与其他地方冲突,或根据服务器防火墙的实际情况手动修改配置。 检查sysctl是否开启ip_forward: 打开sysctl文件:vim /etc/sysctl.conf 修改net.ipv4.ip_forward=1后保存并关闭文件 使用以下指令刷新sysctl：sysctl -p 如执行后正常回显则表示生效。如显示错误信息，请重新打开/etc/syctl并根据错误信息对应部分用#号注释，保存后再刷新sysctl直至不会报错为止。 如果之前使用的自签名证书，后改用SSL证书，部分客户端可能需要卸载之前安装的自签名证书,否则可能会报Ike凭证不可接受的错误: iOS：设置-通用，删除证书对应的描述文件即可； Windows：Win+R,运行mmc打开Microsoft管理控制台,文件-&gt;添加管理单元,添加证书管理单元(必须选计算机账户),展开受信任的根证书颁发机构,找到对应的自签名证书,右键删除即可; Windows Phone:暂时没有找到可以卸载证书的方法(除非越狱),目前只能重置来解决此问题;-]]></content>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
</search>
