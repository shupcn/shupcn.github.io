<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[在阿里云VPS上部署Hexo]]></title>
      <url>/2017/11/16/hexo.html</url>
      <content type="html"><![CDATA[<p>自双11购入了阿里云的VPS后，一直想着捯饬些什么，首当其冲的就是搭一个博客站点。之前使用过WordPress、Joomla、Drupal、国人的Typecho、Emlog、Zblog等。前几个国外的博客虽然功能、插件、模版丰富，但感觉略显臃肿，过多冗余之处，不适合做个人站点使用，尤其不适合笔者的1G1M的小水管主机。而国人的Typecho、Emlog感觉不错，安装使用简单、占用内存少、界面清新，没有多余的功能，支持Markdown，还原写作本质。但在使用中，出现不少小问题，细节不完善，影响实际体验，遂弃之。直到遇见了<strong>Hexo</strong>……</p>
<a id="more"></a>
<p>Hexo的介绍不再赘述，可以登录其<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">中文官网</a>了解。其实在接触Hexo之前，笔者就对纯静态的博客框架有所了解，比如jekyll、octopress等。与Hexo一样，他们的共同的优点就是部署页面纯静态html，加载速度快、浏览体验好、占用内存小，支持Markdown，当然最重要的一点是<strong>有逼格</strong>。最终放弃Jekyll等等选择Hexo的原因是：相对于Jekyll基于Ruby实现，Hexo基于Node.js，在Windows上安装Node.Js环境更简单，另外，Hexo的主题更符合我的品位。</p>
<p>这类静态博客系统最大的一个缺陷就在于要求用户具有一定的技术水平，Hexo是我见过最难建立的博客系统。网上有很多文章是把Hexo部署到Github或者Coding等，优点是搭建快捷、免费，缺点显而易见，Github远在大洋彼岸，加载速度可想而知，而Coding则是有广告。既然已经有了云主机，当然不能浪费。笔者阅读了网上N多文章及教程，踩过坑，走过弯路，在经历N次的失败后，终于搭建成功。下面就把最简明扼要的过程列出来，谨以此自勉或造福后人。</p>
<hr>
<h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><h2 id="VPS及域名"><a href="#VPS及域名" class="headerlink" title="VPS及域名"></a>VPS及域名</h2><p>笔者购买的是阿里云的轻量云服务器，1核1G1M20GSSD，CentOS 7.4系统，搭配<a href="bt.cn">宝塔面板</a>(方便可视化操作)，本文操作过程理论上适用于其他Linux系统。域名需添加A解析记录指向主机IP，域名购买、解析(国内VPS需备案)的过程请自行搜索。</p>
<h2 id="SSH工具"><a href="#SSH工具" class="headerlink" title="SSH工具"></a>SSH工具</h2><p>SSH工具是我们用来以命令行的方式远程操作服务器端。Putty小巧、免费，Xshell功能更强大，但是收费。笔者使用的是Putty，点此下载<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="external">(最新版)</a>，注意本地操作系统，自行下载相应版本安装。如何使用SSH工具连接VPS，请看阿里云的<a href="https://help.aliyun.com/document_detail/59083.html#windows" target="_blank" rel="external">官方教程</a>。</p>
<h1 id="本地端配置"><a href="#本地端配置" class="headerlink" title="本地端配置"></a>本地端配置</h1><p>本地配置很简单，依次安装好Node.js和Git,再安装Hexo即可，Hexo需要前两者的支持。本人是用的win10系统，本地端不需要什么配置，只要安装相应版本即可，Mac或Linux系统应该更容易。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>这里给出Node.js官方下载链接：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">https://nodejs.org/zh-cn/download/</a><br>安装没什么好说的，一路默认下一步即可。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>同样给出Git官方下载链接：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>对应自己的本地系统下载即可，这个套件不仅仅在windows上安装了Git版本控制系统，最重要的是这个套件提供了Git Bash，一个可以在windows上运行的Linux风格shell，除非你够硬核，能忍受win的cmd，否则通过Git Bash使用hexo无疑是最佳选择。下图的选项建议勾选，视觉效果有明显提升。其余选项保持默认即可。</p>
<p><img src="http://47.96.27.26/img/hexo/git.jpg" alt="git"></p>
<h2 id="安装并熟悉Hexo"><a href="#安装并熟悉Hexo" class="headerlink" title="安装并熟悉Hexo"></a>安装并熟悉Hexo</h2><p>Hexo最好的教程当然是<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>！先不用花时间全看完官方文档，这里稍微说下要点，部署好之后可以仔细研究官方文档。</p>
<p>首先是安装，在Git Bash下输入这条命令就安装Hexo了，简单吧。不过这仅仅是把Hexo的程序写进了系统，网站还没有部署好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注意：</strong><code>npm</code>在国内被墙了，国内用户需要挂代理，否则输入命令后半天没反应。这里推荐一个最好的办法。每次要用<code>npm</code>命令时，先输入以下命令行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>接下来熟悉怎么使用Hexo</p>
<ol>
<li><p>首先建立一个站点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;	//以folder为目录名建立站点文件夹</span><br><span class="line">cd &lt;folder&gt;	//转移到站点目录</span><br><span class="line">npm install	//安装依赖</span><br></pre></td></tr></table></figure>
<p>一个网站对应着一个站点文件夹，这里就是你的整个Hexo博客网站。之后的操作我们都在该站点目录下进行。</p>
<p>以上，也可以先新建一个文件夹，直接右键Git Bash Here。然后<code>hexo init</code>即可。</p>
</li>
<li><p>新建一篇文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建立的文章是markdown（以下简称md）文件，熟悉mac的一定知道吧，不熟悉的几分钟就能上手。我们编辑博客就是用编辑md文件实现的。在<code>source/_post</code>目录下，我们看到里面已经有个<code>hello-world.md</code>了。</p>
</li>
<li><p>编辑文章<br>就是编辑你新建的md文件啦。这就需要markdown编辑器喽，当然mac就省事了，对于win系统，Typora和MarkdownPad编辑器，看个人喜好选择。</p>
</li>
<li><p>启动本地服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这条命令会在本地启动服务器，访问地址为<code>localhost:4000</code>，主要是我们正式发布前预览测试用的，启动后你编辑文章和主题等都可以直接更新到该网址，非常方便！但是注意，编辑站点配置文件<code>_config.yml</code>是需要重启该服务器才生效的。现在我们就看下自带<code>hello-world.md</code>的预览效果吧。还是蛮酷炫的吧！</p>
<p><img src="http://47.96.27.26/img/hexo/hello.png" alt="hello"></p>
<p>这里有个坑吐槽一下，若Win安装了福某PDF阅读器会占用4000端口，需要用<code>hexo s -p 5000</code>命令把端口换成5000来执行启动。</p>
</li>
<li><p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>这条命令是由各种md文件和资源生成可部署的静态html页面等，生成的资源都放在新生成的<code>public</code>目录下。</p>
</li>
<li><p>部署到服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>部署方式有多种，对这篇文章来说，就是利用Git部署到你的VPS服务器了，当然在这输入是没卵用的~还没配置服务器端。</p>
</li>
</ol>
<p>掌握以上命令基本就OK了，还有一条<code>hexo clean</code>用来清理缓存，其他的一般用不到，有兴趣的再看<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>。接下来我们看VPS服务器端配置。</p>
<h1 id="VPS服务器端配置"><a href="#VPS服务器端配置" class="headerlink" title="VPS服务器端配置"></a>VPS服务器端配置</h1><p>这一部分的配置就用之前说的Xshell或putty来搞定！</p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建用户用于服务器端站点管理，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser hexo	//创建用户</span><br><span class="line">passwd hexo	//设置密码</span><br><span class="line">su	//检查是否有安装sudo</span><br></pre></td></tr></table></figure>
<p>有的linux系统初始没安装<code>sudo</code>，为了方便，我们需要安装<code>sudo</code>，已有安装的话，跳过这步。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install sudo</span><br></pre></td></tr></table></figure>
<p>再次，为了方便，赋予hexo用户root权限，使用vi命令在<code>/etc/sudoers</code>中添加一行。不会vim编辑临时搜一下，简单，当然也可以通过<strong>宝塔面板</strong>进行可视化操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到这一行添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root        ALL=(ALL)       ALL</span><br><span class="line">hexo        ALL=(ALL)       ALL #这个是添加的</span><br></pre></td></tr></table></figure>
<h2 id="配置本地端无密码ssh登录服务端"><a href="#配置本地端无密码ssh登录服务端" class="headerlink" title="配置本地端无密码ssh登录服务端"></a>配置本地端无密码ssh登录服务端</h2><p>这里为什么要用到Git呢？因为这里的Hexo发布博客是用Git来部署的，而Git又是基于ssh连接的，所以实现一键发布博客就得配置这玩意了。其实很简单，有的教程复杂化了，注意这里最后一步是在本地端操作。</p>
<ol>
<li><p><strong>服务器端</strong>生成ssh密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su hexo</span><br><span class="line">cd /home/hexo</span><br><span class="line">mkdir .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>在生成密钥时，会要求你输入一个加密密码，可以不填写(一路回车)，实现无密码登陆。完成后会在<code>/home/hexo/.ssh/</code>文件夹下生成2个key，一个公钥<code>id_rsa.pub</code>，一个私钥<code>id_rsa</code>，编辑此文件夹中的<code>authorized_keys</code>文件(如没有则新建一个)，把公钥里面的内容全部复制粘贴进去(包含公钥开头的ssh-rsa)。然后把公钥和私钥2个文件下载到本地，后面会用到。</p>
</li>
<li><p><strong>服务器端</strong>确保配置及权限正确(这一步仅为确保，可暂时忽略，若后面ssh连接不成功可返回此步骤检查)</p>
<p>查看<code>/etc/ssh/sshd_config</code>文件配置是否如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HostKey /etc/ssh/ssh_host_rsa_key</span><br><span class="line">RSAAuthentication yes </span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>确保用户<code>hexo</code>及<code>.ssh</code>文件夹及相关密钥文件权限正确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown -R hexo:hexo /home/hexo</span><br><span class="line">chmod 700 /home/hexo</span><br><span class="line">chmod 700 /home/hexo/.ssh</span><br><span class="line">chmod 644 /home/hexo/.ssh/authorized_keys  //公钥文件的所有权限</span><br><span class="line">chmod 600 /home/hexo/.ssh/id_rsa        //私钥文件的所有权限</span><br></pre></td></tr></table></figure>
<p>查看是否有安装ssh并安装，没有的话使用yum安装</p>
<p><img src="http://47.96.27.26/img/hexo/ssh1.png" alt="ssh1"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep ssh //检查是否有ssh</span><br><span class="line">yum install ssh //如果没有ssh运行，则执行此命令安装ssh</span><br></pre></td></tr></table></figure>
<p>安装完后启动服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br><span class="line">service sshd status //检查是否已启动，看到running即可</span><br></pre></td></tr></table></figure>
<p><img src="http://47.96.27.26/img/hexo/ssh-run.png" alt="ssh-run"></p>
</li>
<li><p><strong>本地端</strong>ssh配置 </p>
<p>打开Git Bash，输入<code>pwd</code>查看本地用户的文件夹地址，如下图，一般默认在<code>C:\User\你的账户名</code>。然后打开用户文件夹里的<code>.ssh</code>文件夹，把刚刚从服务器上下载到本地的两个密钥文件拷贝进去。</p>
<p><img src="http://47.96.27.26/img/hexo/pwd.png" alt="pwd"></p>
</li>
<li><p><strong>本地端</strong>ssh验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh hexo@你的域名或者IP //@前是你创建的站点管理用户</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>OK，无密码ssh登陆完成，配置过程注意是在本地端还是服务器端操作。如果连接不成功，返回上述第2步检查。</p>
<h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><p>简单来说，nginx是代理服务器，有它我们就能按照域名或IP访问网页了。</p>
<ol>
<li><p>添加nginx源，安装nginx<br>在<code>/etc/yum.repos.d</code>目录下创建一个yum源文件<code>nginx.repo</code>,用vi编辑或用宝塔写入如下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<p>安装nginx(宝塔里面也有一键安装nginx，不过这种方式更简单)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br><span class="line">nginx -v //查看版本号验证</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除原配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /etc/nginx/conf.d/*</span><br></pre></td></tr></table></figure>
<p>重新配置，添加以下内容到<code>/etc/nginx/conf.d/hexo.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  root /home/hexo/www;  #网站根目录,用来存储网站文件，后面会创建</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">  server_name www.shup.cn;   #你的域名</span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到没，这一步将你的域名和服务器下的网站根目录挂钩，主页是根目录下index.html<br><strong>很关键！！</strong></p>
</li>
<li><p>修改nginx配置文件<br>将<code>/etc/nginx/nginx.conf</code>中第一行的user值修改为hexo</p>
</li>
<li><p>切换到hexo用户，用户主目录下新建<code>www</code>文件夹作为网站根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su hexo</span><br><span class="line">cd ~</span><br><span class="line">mkdir www</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证配置是否正确，如下图。</p>
<p><img src="http://47.96.27.26/img/hexo/nginx.png" alt="nginx"></p>
</li>
<li><p>启动nginx服务并测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br><span class="line">echo &quot;hello nginx&quot; &gt; /home/hexo/www/index.html	//站点根目录下新建index.html</span><br></pre></td></tr></table></figure>
<p>在浏览器中输入你的<strong>域名</strong>或VPS的<strong>IP地址</strong>，出现<strong>hello nginx</strong>字样表示nginx代理服务器搭建成功！</p>
</li>
</ol>
<h2 id="安装配置Git"><a href="#安装配置Git" class="headerlink" title="安装配置Git"></a>安装配置Git</h2><p>即将完成任务~</p>
<ol>
<li><p>安装Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化Git仓库<br>用户主目录下新建hexo.git文件夹用作Git仓库并初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir hexo.git</span><br><span class="line">cd hexo.git</span><br><span class="line">git init --bare	//初始化git仓库，bare表示空仓库</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Git仓库的hooks</p>
<p>hooks，钩子，就是将不同目录的数据实现同步。具体如下，在Git仓库hooks目录下创建文件<code>post-receive</code>并修改权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd hooks</span><br><span class="line">touch post-receive</span><br><span class="line">chmod 755 post-receive</span><br></pre></td></tr></table></figure>
<p>将以下内容添加到<code>post-receive</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/home/hexo/hexo.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/HexoBlog</span><br><span class="line">PUBLIC_WWW=/home/hexo/www</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至此，服务器端的配置全部完成。</p>
<h1 id="本地端部署验证"><a href="#本地端部署验证" class="headerlink" title="本地端部署验证"></a>本地端部署验证</h1><p>接下来我们就试试把博客发布到VPS服务器吧！下面都是<strong>本地端</strong>的操作。</p>
<h2 id="安装hexo-git部署模块"><a href="#安装hexo-git部署模块" class="headerlink" title="安装hexo git部署模块"></a>安装hexo git部署模块</h2><p>国内用户别忘记挂代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="修改站点配置文件-config-yml"><a href="#修改站点配置文件-config-yml" class="headerlink" title="修改站点配置文件_config.yml"></a>修改站点配置文件_config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://www.shup.cn	#这里修改你的网址或者IP</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure>
<p>部署项配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git	#部署方式</span><br><span class="line">  repo: hexo@www.shup.cn:/home/hexo/hexo.git #@符号之前是服务器的管理用户，之后是服务器的git仓库路径</span><br><span class="line">  branch: master	#分支，我们只用主分支即可</span><br></pre></td></tr></table></figure>
<h2 id="部署验证"><a href="#部署验证" class="headerlink" title="部署验证"></a>部署验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean	//清除缓存（实际是删除db.json和public文件夹）</span><br><span class="line">hexo g	//生成静态页面（public文件夹）</span><br><span class="line">hexo d	//部署到服务器</span><br></pre></td></tr></table></figure>
<p>OK，完结撒花，浏览器输入你的域名看看吧！</p>
<p>其实就是最初给你预览的helloworld，只不过它搬到服务器了！</p>
<p>以后我们发布博客就用我讲解Hexo那一章的第2-6步就可以了，甚至可以用<strong>hexo g -d</strong>来一键生成发布！这样你就可以专心写md了，发布只是一个命令的事！</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS/Ubuntu一键安装IPSEC/IKEV2 科学上网[翻墙]服务器]]></title>
      <url>/2017/11/15/fanqiang.html</url>
      <content type="html"><![CDATA[<p>买了香港或者国外的VPS不用来做科(V)学(P)上(N)网，简直太浪费了。这篇文章整理成了一份一键安装的脚本。适用于WindowsPhone,iOS,Android和PC设备。有需要的童鞋可以拿来食用~ ~ ~ ~ CentOS测试了下貌似没什么问题，Ubuntu的手里暂时没有空闲vps就没试了，其实也差不多的。</p>
<a id="more"></a>
<h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><p>用法很简单：<br>总结成一句话就是：<strong>除了类型要选对以外，其他的一路回车就好了</strong></p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><blockquote>
<ul>
<li>服务端要求：Ubuntu或者CentOS-6/7或者Debian</li>
<li>客户端：<ul>
<li>iOS/OSX=&gt;ikev1,ikev2</li>
<li>Andriod=&gt;ikev1</li>
<li>WindowsPhone=&gt;ikev2</li>
<li>其他Windows平台=&gt;ikev2</li>
</ul>
</li>
<li>可使用自己的私钥和根证书，也可自动生成</li>
<li>证书可绑定域名或ip</li>
<li>要是图方便可一路回车</li>
</ul>
</blockquote>
<h1 id="最近更新"><a href="#最近更新" class="headerlink" title="最近更新"></a>最近更新</h1><blockquote>
<ul>
<li>添加SSL证书自动申请自动更新并应用于IKEv2的解决方案,详见这篇博文:<a href="https://quericy.me/blog/860/" target="_blank" rel="external">SSL证书自动更新并应用到IKEv2, Nginx</a> ;</li>
<li>添加对CentOS7的firewall防火墙的支持;</li>
<li>使用ip address替换已被废弃的ifconfig;</li>
<li>生成单独的sysctl配置文件/etc/sysctl.d/10-ipsec.conf单独加载，用于开启ipv4转发(如以后卸载或需要关闭net.ipv4.ip_forward,请记得删除此文件);</li>
<li>升级strongswan版本到5.5.1,解决iOS9和iOS10的兼容性问题(感谢<a href="https://github.com/caasiu" target="_blank" rel="external">caasiu</a>的提醒<a href="https://github.com/quericy/one-key-ikev2-vpn/issues/21" target="_blank" rel="external">#21</a>);</li>
<li>添加导入SSL证书的支持,安装时可选使用证书颁发机构签发的证书还是生成自签名证书;</li>
</ul>
</blockquote>
<h1 id="服务端安装说明"><a href="#服务端安装说明" class="headerlink" title="服务端安装说明"></a>服务端安装说明</h1><ol>
<li><p>下载脚本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>注:如需使用其他分支的脚本,请将上述url中的master修改为分支名称,各分支区别详见本页的<a href="http://47.96.27.26/2017/11/15/vpn.html#分支说明">分支说明</a>节点</li>
</ul>
</li>
<li><p>运行脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x one-key-ikev2.sh</span><br><span class="line">bash one-key-ikev2.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>等待自动配置部分内容后，选择VPS类型（OpenVZ还是Xen、KVM），<strong>选错将无法成功连接，请务必核实服务器的类型</strong>。输入服务器ip或者绑定的域名(连接vpn时服务器地址将需要与此保持一致,如果是导入泛域名证书这里需要写<code>*.域名</code>的形式)；</p>
</li>
</ol>
<p><img src="http://shupcd.test.upcdn.net/fanqiang/one-key-install-ikev2-vpn.jpg" alt="one-key-install-ikev2-vpn"></p>
<ol>
<li><p>选择使用使用证书颁发机构签发的SSL证书还是生成自签名证书：</p>
<ul>
<li>如果选择no,<code>使用自签名证书</code>（客户端如果使用IkeV2方式连接，将需要导入生成的证书并信任）则需要填写证书的相关信息(C,O,CN)，为空将使用默认值(default value)，确认无误后按任意键继续,后续安装过程中会出现输入两次pkcs12证书的密码的提示(可以设置为空)</li>
<li>如果选择yes，<code>使用SSL证书</code>（如果证书是被信任的，后续步骤客户端将无需导入证书）请在继续下一步之前，将以下文件按提示命名并放在<strong>脚本相同的目录下</strong>（SSL证书详细配置和自动续期方案可见<a href="https://quericy.me/blog/860/" target="_blank" rel="external">这里</a>）：<ol>
<li><strong>ca.cert.pem</strong> 证书颁发机构的CA，比如Let‘s Encrypt的证书,或者其他链证书；</li>
<li><strong>server.cert.pem</strong> 签发的域名证书；</li>
<li><strong>server.pem</strong> 签发域名证书时用的私钥；</li>
</ol>
</li>
</ul>
</li>
<li><p>是否使用SNAT规则(可选).默认为不使用.使用前请确保服务器具有不变的<strong>静态公网ip</strong>,可提升防火墙对数据包的处理速度.如果服务器网络设置了NAT(如AWS的弹性ip机制),则填写网卡连接接口的ip地址(参见<a href="https://github.com/KinonC" target="_blank" rel="external">KinonC</a>提供的方案:<a href="https://github.com/quericy/one-key-ikev2-vpn/issues/36" target="_blank" rel="external">#36</a>).</p>
</li>
<li><p>防火墙配置.默认配置iptables(如果使用的是firewall(如CentOS7)请选择yes自动配置firewall,将无视SNAT并跳过后续的补充网卡接口步骤).补充网卡接口信息,为空则使用默认值(Xen、KVM默认使用eth0,OpenVZ默认使用venet0).如果服务器使用其他公网接口需要在此指定接口名称,<strong>填写错误VPN连接后将无法访问外网</strong>)</p>
</li>
<li><p>看到install Complete字样即表示安装完成。默认用户名密码将以黄字显示，可根据提示自行修改配置文件中的用户名密码,多用户则在配置文件中按格式一行一个(多用户时用户名不能使用%any),保存并重启服务生效。</p>
</li>
<li><p>将提示信息中的证书文件ca.cert.pem拷贝到客户端，修改后缀名为.cer后导入。ios设备使用Ikev1无需导入证书，而是需要在连接时输入共享密钥，共享密钥即是提示信息中的黄字PSK.<br><img src="http://shupcd.test.upcdn.net/fanqiang/ikev2_VPN_install.jpg" alt="ikev2_VPN_install"></p>
</li>
</ol>
<h1 id="客户端配置说明"><a href="#客户端配置说明" class="headerlink" title="客户端配置说明"></a>客户端配置说明</h1><ul>
<li><p>连接的服务器地址和证书保持一致,即取决于签发证书ca.cert.pem时使用的是ip还是域名;</p>
</li>
<li><p><strong>Android/iOS/OSX</strong> 可使用ikeV1,认证方式为用户名+密码+预共享密钥(PSK);</p>
</li>
<li><p><strong>iOS/OSX/Windows7+/WindowsPhone8.1+/Linux</strong> 均可使用IkeV2,认证方式为用户名+密码。<code>使用SSL证书</code>则无需导入证书；<code>使用自签名证书</code>则需要先导入证书才能连接,可将ca.cert.pem更改后缀名作为邮件附件发送给客户端,手机端也可通过浏览器导入,其中:</p>
<ul>
<li><p><strong>iOS/OSX</strong> 的远程ID和服务器地址保持一致,用户鉴定选择”用户名”.如果通过浏览器导入,将证书放在可访问的远程外链上,并在<strong>系统浏览器</strong>(Safari)中访问外链地址;</p>
</li>
<li><p><strong>Windows PC</strong> 系统导入证书需要导入到<strong>“本地计算机”</strong>的”受信任的根证书颁发机构”,以”当前用户”的导入方式是无效的.推荐运行mmc添加本地计算机的证书管理单元来操作;</p>
</li>
<li><p><strong>WindowsPhone8.1</strong> 登录时的用户名需要带上域信息,即wp”关于”页面的设备名称\用户名,也可以使用%any %any : EAP “密码”进行任意用户名登录,但指定了就不能添加其他用户名了.</p>
</li>
<li><p><strong>WindowsPhone10</strong> <del>的vpn还存在bug(截至10586.164),ikeV2方式可连接但系统流量不会走vpn,只能等微软解决.</del> (截至14393.5 ,此bug已经得到修复,现在WP10已经可以正常使用IkeV2.)</p>
</li>
<li><p><strong>Windows10</strong>也存在此bug,部分Win10系统连接后ip不变,没有自动添加路由表,使用以下方法可解决:</p>
<ul>
<li>手动关闭vpn的split tunneling功能(在远程网络上使用默认网关);</li>
<li><p>也可使用powershell修改,进入CMD窗口,运行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powershell    #进入ps控制台</span><br><span class="line">get-vpnconnection    #检查vpn连接的设置（包括vpn连接的名称）</span><br><span class="line">set-vpnconnection &quot;vpn连接名称&quot; -splittunneling $false    #关闭split tunneling</span><br><span class="line">get-vpnconnection   #检查修改结果</span><br><span class="line">exit   #退出ps控制台</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="卸载方式"><a href="#卸载方式" class="headerlink" title="卸载方式"></a>卸载方式</h1><ol>
<li><p>进入脚本所在目录的strongswan文件夹执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make uninstall</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除脚本所在目录的相关文件(one-key-ikev2.sh,strongswan.tar.gz,strongswan文件夹,my_key文件夹).</p>
</li>
<li><p>卸载后记得检查iptables配置.</p>
</li>
</ol>
<h1 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a>分支说明</h1><ul>
<li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/master" target="_blank" rel="external">master</a>分支:经过测试的相对稳定的版本;</li>
<li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/dev-debian" target="_blank" rel="external">dev-debian</a>分支:Debian6/7测试分支,该脚本由<a href="https://github.com/bestoa" target="_blank" rel="external">bestoa</a>修改提供;</li>
<li><a href="https://github.com/quericy/one-key-ikev2-vpn/tree/dev" target="_blank" rel="external">dev</a>分支:开发分支,使用最新版本的strongswan,未进过充分测试,用于尝试和添加一些新的功能,未来可能添加对L2TP的兼容支持,以及对ipv6的支持;</li>
</ul>
<h1 id="部分问题解决方案"><a href="#部分问题解决方案" class="headerlink" title="部分问题解决方案"></a>部分问题解决方案</h1><ul>
<li><p>ipsec启动问题：服务器重启后默认ipsec不会自启动，请命令手动开启,或添加/usr/local/sbin/ipsec start到自启动脚本文件中(如rc.local等)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipsec start</span><br></pre></td></tr></table></figure>
</li>
<li><p>ipsec常用指令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipsec start   #启动服务</span><br><span class="line">ipsec stop    #关闭服务</span><br><span class="line">ipsec restart #重启服务</span><br><span class="line">ipsec reload  #重新读取</span><br><span class="line">ipsec status  #查看状态</span><br><span class="line">ipsec --help  #查看帮助</span><br></pre></td></tr></table></figure>
</li>
<li><p>可连接但是无法访问网络：</p>
<ul>
<li>检查iptables是否正常启用,检查iptables规则是否与其他地方冲突,或根据服务器防火墙的实际情况手动修改配置。</li>
<li>检查sysctl是否开启ip_forward:<ol>
<li>打开sysctl文件:<code>vim /etc/sysctl.conf</code></li>
<li>修改net.ipv4.ip_forward=1后保存并关闭文件</li>
<li>使用以下指令刷新sysctl：<code>sysctl -p</code></li>
<li>如执行后正常回显则表示生效。如显示错误信息，请重新打开/etc/syctl并根据错误信息对应部分用#号注释，保存后再刷新sysctl直至不会报错为止。</li>
</ol>
</li>
</ul>
</li>
<li><p>如果之前使用的自签名证书，后改用SSL证书，部分客户端可能需要卸载之前安装的自签名证书,否则可能会报<code>Ike凭证不可接受</code>的错误:</p>
<ul>
<li>iOS：设置-通用，删除证书对应的描述文件即可；</li>
<li>Windows：Win+R,运行mmc打开Microsoft管理控制台,文件-&gt;添加管理单元,添加证书管理单元(必须选计算机账户),展开受信任的根证书颁发机构,找到对应的自签名证书,右键删除即可;</li>
<li>Windows Phone:暂时没有找到可以卸载证书的方法(除非越狱),目前只能重置来解决此问题;-</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
